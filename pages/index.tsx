import { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import dynamic from "next/dynamic";
import { GetServerSideProps } from "next";
import { useRouter } from "next/router";
import dayjs from "dayjs";
import { fetchNotecardData } from "../src/lib/notecardData";
import Chart from "../src/components/Chart";
import useInterval from "../src/hooks/useInterval";
import { convertCelsiusToFahrenheit } from "../src/util/helpers";
import styles from "../styles/Home.module.css";

export default function Home({
  data,
}: {
  data: {
    uid: string;
    device_uid: string;
    file: string;
    captured: string;
    received: string;
    body: {
      temperature: number;
      voltage: number;
    };
    tower_location?: {
      when: string;
      latitude: number;
      longitude: number;
    };
    gps_location: {
      when: string;
      latitude: number;
      longitude: number;
    };
  }[];
}) {
  // needed to make the Leaflet map render correctly
  const MapWithNoSSR = dynamic(() => import("../src/components/Map"), {
    ssr: false,
  });

  const router = useRouter();

  // h/t to Josh Comeau for this stroke of brilliance: https://www.joshwcomeau.com/nextjs/refreshing-server-side-props/
  const refreshData = () => {
    router.replace(router.asPath, router.asPath, { scroll: false });
    setIsRefreshing(true);
  };

  const [lngLatCoords, setLngLatCoords] = useState<number[][]>([]);
  const [lastPosition, setLastPosition] = useState<[number, number]>([
    33.82854810044288, -84.32526648205214,
  ]);
  const [latLngMarkerPositions, setLatLngMarkerPositions] = useState<
    number[][]
  >([]);
  const [tempData, setTempData] = useState<
    { date: string; shortenedDate: string; temp: number }[]
  >([]);

  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);
  // configurable via next.config.js settings
  const [delayTime, setDelayTime] = useState<number>(
    Number(process.env.REFRESH_INTERVAL)
  );

  useInterval(() => {
    refreshData();
  }, delayTime);

  useEffect(() => {
    const lngLatArray: number[][] = [];
    const latLngArray: number[][] = [];
    const tempDataArray: {
      date: string;
      shortenedDate: string;
      temp: number;
    }[] = [];
    if (data && data.length > 0) {
      data
        .sort((a, b) => {
          return Number(a.captured) - Number(b.captured);
        })
        .map((event) => {
          let lngLatCoords: number[] = [];
          let latLngCoords: number[] = [];
          const temperatureObj = {
            date: dayjs(event.captured).format("MMM D, YYYY h:mm A"),
            shortenedDate: dayjs(event.captured).format("MM/DD/YYYY"),
            temp: convertCelsiusToFahrenheit(event.body.temperature),
          };
          tempDataArray.push(temperatureObj);
          if (event.gps_location) {
            lngLatCoords = [
              event.gps_location?.longitude,
              event.gps_location?.latitude,
            ];
            latLngCoords = [
              event.gps_location?.latitude,
              event.gps_location?.longitude,
            ];
          } else if (event.tower_location) {
            lngLatCoords = [
              event.tower_location?.longitude,
              event.tower_location?.latitude,
            ];
            latLngCoords = [
              event.tower_location?.latitude,
              event.tower_location?.longitude,
            ];
          }
          lngLatArray.push(lngLatCoords);
          latLngArray.push(latLngCoords);
        });
      const lastEvent = data.at(-1);
      if (lastEvent) {
        const lastCoords: [number, number] = [
          lastEvent.gps_location.latitude,
          lastEvent.gps_location.longitude,
        ];
        setLastPosition(lastCoords);
      }
    }
    setLngLatCoords(lngLatArray);
    setLatLngMarkerPositions(latLngArray);
    setTempData(tempDataArray);
    setIsRefreshing(false);
  }, [data]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.tsx</code>
        </p>
        {!isRefreshing ? (
          <>
            <div className={styles.grid}>
              <p>Here's some notecard data: </p>
              <Chart tempData={tempData} />
            </div>
            {/* todo move this styling to the map component css  */}
            <div id="map" style={{ width: "1000px", height: "1000px" }}>
              <MapWithNoSSR
                coords={lngLatCoords}
                lastPosition={lastPosition}
                markers={latLngMarkerPositions}
              />
            </div>
          </>
        ) : (
          <p>Refreshing data...</p>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  // we have to pull map data here before rendering the component to draw the lines between GPS data points
  const data = await fetchNotecardData();
  return { props: { data } };
};
